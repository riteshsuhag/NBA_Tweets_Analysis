# Getting the longitude and lattitude
for (i in colnames_temp) {
colnames(Map_Coordinates)[1] <- i
temp2 <- left_join(temp2, Map_Coordinates)
colnames(temp2)[colnames(temp2) == "LONGITUDE"] <- paste(i,"_LONGITUDE")
colnames(temp2)[colnames(temp2) == "LATITUDE"] <- paste(i,"_LATITUDE")
}
colnames(Map_Coordinates)[1] <- "AIRPORT"
# Creating variables for calculating the distances -
distance_actual_2 <- c(rep(0, nrow(temp2)))
# Adding all the distances for Trip 1 -
for(i in c(1:(length(colnames_temp)-1))) {
distance_actual_2_temp <- distHaversine(as.matrix(temp2[, c(paste(colnames_temp[i],"_LONGITUDE"), paste(colnames_temp[i],"_LATITUDE"))]),
as.matrix(temp2[, c(paste(colnames_temp[i+1],"_LONGITUDE"), paste(colnames_temp[i+1],"_LATITUDE"))]),
r = 6378137)
# Replacing NAs in temp to be 0 -
distance_actual_2_temp[is.na(distance_actual_2_temp)] <- 0
distance_actual_2 <- distance_actual_2 + distance_actual_2_temp
}
# Getting rid of all the unwanted columns -
temp2[ , colnames_temp] <- NULL
temp2[ , paste(colnames_temp, "_LONGITUDE")] <- NULL
temp2[ , paste(colnames_temp, "_LATITUDE")] <- NULL
temp2$Trip1_Count <- NULL
temp2$Trip2_Count <- NULL
# Saving the value in the data frame -
temp2$distance_actual_2 <- distance_actual_2
# Saving the sequence back -
colnames(temp2)[colnames(temp2) == "Trip_Info1"] <- "Trip_Info"
temp2 <- temp2[ , c("Trip_Info", 1:9, 11:14)]
temp2 <- temp2[ , c(10, 1:9, 11:14)]
temp2$Trip2_Count <- NULL
library(dplyr)
library(tidyr)
library(reshape2)
library(readr)
library(stringr)
# Please install the following package.
library(geosphere)
`%notin%` <- Negate(`%in%`)
if (Sys.getenv("LOGNAME")=="ericlewis") {
username <- 'ericlewis'
repodir <- '/Users/ericlewis/Documents/EconResearch2/Airlines'
dbdir <- '/Users/ericlewis/Dropbox/Airlines'
}
if (Sys.getenv("LOGNAME")=="riteshsuhag") {
username <- 'riteshsuhag'
repodir <- '/Users/riteshsuhag/Desktop/RA/GitHub_Repo'
dbdir <- '/Users/riteshsuhag/Dropbox/Airlines'
}
# Reading the map-coordinates file.
Map_Coordinates <- read_csv(paste(dbdir, "/raw_data/MasterCoordinate/Map_Coordinates.csv", sep = ""))
# Saving the required columns -
Map_Coordinates <- Map_Coordinates[, c("AIRPORT", "LONGITUDE", "LATITUDE", "AIRPORT_START_DATE")]
# Sorting and selecting unique values from Map_coordinates.
Map_Coordinates <- Map_Coordinates[order(Map_Coordinates$AIRPORT, Map_Coordinates$AIRPORT_START_DATE), ]
Map_Coordinates <- Map_Coordinates[!(duplicated(Map_Coordinates$AIRPORT, fromLast = TRUE)), ]
# Removing the Airport Start Date column as it is no longer required.
Map_Coordinates$AIRPORT_START_DATE <- NULL
# Reading one of the db1b cleaned (to check if all the required airports are present)
# NOTE: Other files may contain other airports but this will be helpful to kick-off.
temp2 <- read_csv(paste(dbdir,
"/intermediate_data/db1b_cleaned/route_airline_quarter_2002_Q1.csv", sep = ""))
# temp2 <- temp
temp2$Trip_Info1 <- temp2$Trip_Info
temp2 <- separate(temp2, col = Trip_Info, into = c("Trip1", "Trip2"), sep = "_x-")
# %%%%%%%%%%%%%%% CALCULATING THE DIRECT DISTANCES %%%%%%%%%%%%%%%%%%%%%%
# Saving the origin and destination of first trip -
temp2$Trip1_Orgin <- substr(temp2$Trip1, 1,3)
temp2$Trip1_Dest <- ifelse(temp2$Count_Break == 1,
substr(temp2$Trip1, nchar(temp2$Trip1)-4 ,nchar(temp2$Trip1)-2) ,
substr(temp2$Trip1, nchar(temp2$Trip1)-2 ,nchar(temp2$Trip1)))
# Important thing to remember is that if count break = 2, dest of trip 1 is origin of trip 2.
temp2$Trip2_Orgin <- ifelse(temp2$Count_Break == 1, NA,
temp2$Trip1_Dest)
temp2$Trip2_Dest <- ifelse(temp2$Count_Break == 1, NA,
substr(temp2$Trip2, nchar(temp2$Trip2)-4 ,nchar(temp2$Trip2)-2))
# This will help in future while calculating for actual distances.
temp2$Trip2_Airport_1 <- temp2$Trip1_Dest
# Getting lattitude and longitude of the Origin - Trip 1
temp2 <- left_join(temp2, Map_Coordinates, by = c("Trip1_Orgin" = "AIRPORT"))
colnames(temp2)[colnames(temp2) == "LONGITUDE"] <- "Trip1_Orgin_LONGITUDE"
colnames(temp2)[colnames(temp2) == "LATITUDE"] <- "Trip1_Orgin_LATITUDE"
# Getting lattitude and longitude of the Dest - Trip 1
temp2 <- left_join(temp2, Map_Coordinates, by = c("Trip1_Dest" = "AIRPORT"))
colnames(temp2)[colnames(temp2) == "LONGITUDE"] <- "Trip1_Dest_LONGITUDE"
colnames(temp2)[colnames(temp2) == "LATITUDE"] <- "Trip1_Dest_LATITUDE"
# Getting lattitude and longitude of the Origin - Trip 2
temp2 <- left_join(temp2, Map_Coordinates, by = c("Trip2_Orgin" = "AIRPORT"))
colnames(temp2)[colnames(temp2) == "LONGITUDE"] <- "Trip2_Orgin_LONGITUDE"
colnames(temp2)[colnames(temp2) == "LATITUDE"] <- "Trip2_Orgin_LATITUDE"
# Getting lattitude and longitude of the Dest - Trip 2
temp2 <- left_join(temp2, Map_Coordinates, by = c("Trip2_Dest" = "AIRPORT"))
colnames(temp2)[colnames(temp2) == "LONGITUDE"] <- "Trip2_Dest_LONGITUDE"
colnames(temp2)[colnames(temp2) == "LATITUDE"] <- "Trip2_Dest_LATITUDE"
# Calculating distance_direct_1 and distance_direct_2
temp2$distance_direct_1 <- distHaversine(as.matrix(temp2[, c("Trip1_Orgin_LONGITUDE", "Trip1_Orgin_LATITUDE")]),
as.matrix(temp2[, c("Trip1_Dest_LONGITUDE", "Trip1_Dest_LATITUDE")]),
r = 6378137)
temp2$distance_direct_2 <- distHaversine(as.matrix(temp2[, c("Trip2_Orgin_LONGITUDE", "Trip2_Orgin_LATITUDE")]),
as.matrix(temp2[, c("Trip2_Dest_LONGITUDE", "Trip2_Dest_LATITUDE")]),
r = 6378137)
temp2$distance_direct_2[is.na(temp2$distance_direct_2)] <- 0
# Removing un-wanted columns -
temp2$Trip1_Orgin <- NULL
temp2$Trip1_Dest <- NULL
temp2$Trip2_Orgin <- NULL
temp2$Trip2_Dest <- NULL
temp2$Trip1_Orgin_LONGITUDE <- NULL
temp2$Trip1_Orgin_LATITUDE <- NULL
temp2$Trip1_Dest_LONGITUDE <- NULL
temp2$Trip1_Dest_LATITUDE <- NULL
temp2$Trip2_Orgin_LONGITUDE <- NULL
temp2$Trip2_Orgin_LATITUDE <- NULL
temp2$Trip2_Dest_LONGITUDE <- NULL
temp2$Trip2_Dest_LATITUDE <- NULL
# %%%%%%%%%%%%%%% CALCULATING THE ACTUAL DISTANCES %%%%%%%%%%%%%%%%%%%%%%
# Counting the number of airports in trip 1 and trip 2-
temp2$Trip1_Count <- (str_count(temp2$Trip1, "-"))
temp2$Trip2_Count <- (str_count(temp2$Trip2, "-"))
temp2$Trip2_Count[is.na(temp2$Trip2_Count)] <- 0
# ------ TRIP 1
# Setting a vector of column names for airports in Trip 1 -
colnames_temp <- c()
for(i in c(1:(max(temp2$Trip1_Count)+1))) {
colnames_temp <- c(colnames_temp, paste("Trip1_Airport_", i, sep = ""))
}
# Getting rid of the "_x" in Trip1 when coupons = 1.
temp2$Trip1 <- gsub("_x", "", temp2$Trip1)
# Separating all the airports in trip 1 to get the actual haversine distance -
temp2 <- separate(temp2, col = Trip1, into = colnames_temp , sep = "-")
# Getting the longitude and lattitude
for (i in colnames_temp) {
colnames(Map_Coordinates)[1] <- i
temp2 <- left_join(temp2, Map_Coordinates)
colnames(temp2)[colnames(temp2) == "LONGITUDE"] <- paste(i,"_LONGITUDE")
colnames(temp2)[colnames(temp2) == "LATITUDE"] <- paste(i,"_LATITUDE")
}
colnames(Map_Coordinates)[1] <- "AIRPORT"
# Creating variables for calculating the distances -
distance_actual_1 <- c(rep(0, nrow(temp2)))
# Adding all the distances for Trip 1 -
for(i in c(1:(length(colnames_temp)-1))) {
distance_actual_1_temp <- distHaversine(as.matrix(temp2[, c(paste(colnames_temp[i],"_LONGITUDE"), paste(colnames_temp[i],"_LATITUDE"))]),
as.matrix(temp2[, c(paste(colnames_temp[i+1],"_LONGITUDE"), paste(colnames_temp[i+1],"_LATITUDE"))]),
r = 6378137)
# Replacing NAs in temp to be 0 -
distance_actual_1_temp[is.na(distance_actual_1_temp)] <- 0
distance_actual_1 <- distance_actual_1 + distance_actual_1_temp
}
# Getting rid of all the columns -
temp2[ , colnames_temp] <- NULL
temp2[ , paste(colnames_temp, "_LONGITUDE")] <- NULL
temp2[ , paste(colnames_temp, "_LATITUDE")] <- NULL
# Saving the value in the data frame -
temp2$distance_actual_1 <- distance_actual_1
# ------ TRIP 2
# Setting a vector of column names for airports in Trip 2 -
colnames_temp <- c()
# Note - Here the the colnames saved starts from Airport 2, because the first airport is the last airport of trip 1.
# This is where saving saving Trip2_Airport_1 becomes helpful.
for(i in c(1:(max(temp2$Trip2_Count)+1))) {
colnames_temp <- c(colnames_temp, paste("Trip2_Airport_", i+1, sep = ""))
}
# Getting rid of the "_x" in Trip2
temp2$Trip2 <- gsub("_x", "", temp2$Trip2)
# temp2$Trip2_temp <- temp2$Trip2
# Separating all the airports in trip 2 to get the actual haversine distance -
temp2 <- separate(temp2, col = Trip2, into = colnames_temp , sep = "-")
# After saving the airports from Trip2, we save the airport1 is the colnames list -
colnames_temp <- c("Trip2_Airport_1", colnames_temp)
# Getting the longitude and lattitude
for (i in colnames_temp) {
colnames(Map_Coordinates)[1] <- i
temp2 <- left_join(temp2, Map_Coordinates)
colnames(temp2)[colnames(temp2) == "LONGITUDE"] <- paste(i,"_LONGITUDE")
colnames(temp2)[colnames(temp2) == "LATITUDE"] <- paste(i,"_LATITUDE")
}
colnames(Map_Coordinates)[1] <- "AIRPORT"
# Creating variables for calculating the distances -
distance_actual_2 <- c(rep(0, nrow(temp2)))
# Adding all the distances for Trip 1 -
for(i in c(1:(length(colnames_temp)-1))) {
distance_actual_2_temp <- distHaversine(as.matrix(temp2[, c(paste(colnames_temp[i],"_LONGITUDE"), paste(colnames_temp[i],"_LATITUDE"))]),
as.matrix(temp2[, c(paste(colnames_temp[i+1],"_LONGITUDE"), paste(colnames_temp[i+1],"_LATITUDE"))]),
r = 6378137)
# Replacing NAs in temp to be 0 -
distance_actual_2_temp[is.na(distance_actual_2_temp)] <- 0
distance_actual_2 <- distance_actual_2 + distance_actual_2_temp
}
# Getting rid of all the unwanted columns -
temp2[ , colnames_temp] <- NULL
temp2[ , paste(colnames_temp, "_LONGITUDE")] <- NULL
temp2[ , paste(colnames_temp, "_LATITUDE")] <- NULL
temp2$Trip1_Count <- NULL
temp2$Trip2_Count <- NULL
# Saving the value in the data frame -
temp2$distance_actual_2 <- distance_actual_2
# Saving the sequence back -
colnames(temp2)[colnames(temp2) == "Trip_Info1"] <- "Trip_Info"
temp2 <- temp2[ , c(10, 1:9, 11:14)]
mean(exp(sqrt(1:10)))
(1:10) %>% sqrt() %>% exp() %>% mean()
mean(exp(sqrt(1:10)))
(1:10) %>% sqrt() %>% exp() %>% mean()
set.seed(2020)
random_normal_numbers <- rnorm(n = 1000, mean = 3, sd = 1)
set.seed(2020)
random_normal_numbers <- rnorm(n = 1000, mean = 3, sd = 1)
dollars_converted <- function(value, cpi_a, cpi_b){
output = value * cpi_b / cpi_a
return(output)
}
dollars_converted <- function(value, cpi_a, cpi_b){
output = value * cpi_b / cpi_a
return(output)
}
dollars_2018 = dollars_converted(value = 7.4, cpi_a = 201.6, cpi_b = 251.1)
dollars_2018
dollars_2018 = dollars_converted(value = 7.4, cpi_a = 201.6, cpi_b = 251.1)
dollars_2018
mean(random_normal_numbers[30], random_normal_numbers[300])
```{r}
present_value <- function(r = dollars_converted(7.4, 201.6, 251.1) , d, t) {
# Calculating the denominator
denominator = (1 + d)^t
# Calculating the output
output = r / denominator
# Returning the output
return(output)
}
present_value(d = 0.05, t = 5)
present_value(d = 0.05, t = 50)
present_value(d = 0.1, t = 5)
time <- c(1:50)
pvs <- vector(mode = "double", length = length(time))
for (i in seq_along(time)) {
pvs[i] <- present_value(d = 0.05, t = time[i])
}
?tibble
present_value_simulator <- function(r = dollars_converted(7.4, 201.6, 251.1) , d, t_start, t_end){
time = c(t_start, t_end)
pvs <- vector(mode = "double", length = length(time))
for (i in seq_along(time)) {
pvs[i] <- present_value(d = 0.05, t = time[i])
}
output = data.frame(time = time,
pvs = pvs)
return(output)
}
present_value_simulator(d = 0.1, t_start = 0, t_end = 30)
present_value_simulator <- function(r = dollars_converted(7.4, 201.6, 251.1) , d, t_start, t_end){
time = c(t_start:t_end)
pvs <- vector(mode = "double", length = length(time))
for (i in seq_along(time)) {
pvs[i] <- present_value(d = 0.05, t = time[i])
}
output = data.frame(time = time,
pvs = pvs)
return(output)
}
present_value_simulator(d = 0.1, t_start = 0, t_end = 30)
present_value_simulator(d = 0.1, t_start = 0, t_end = 30) %>% ggplot()
x <- present_value_simulator(d = 0.1, t_start = 0, t_end = 30)
x %>% filter(x$time <= 10)
x %>% filter(x$time <= 25 & x$pvs <= 5)
x %>% filter(time <= 25 & pvs <= 5)
?filter
boston_property = read_csv("https://query.data.world/s/pfqt62iufpcricbewykr3q6nrnpj6n")
View(boston_property)
table(boston_property$R_TOTAL_RMS)
View(boston_property)
boston_property$AV_TOTAL
?sample
length(boston_property)
dim(boston_property)
dim(boston_property)[1]
boston_property_sample = boston_property %>% filter(AV_Total != 0 & AV_Land != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample(1:172841, prob = 0.8)
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample(1:172841, prob = 0.8)
0.8 * 172841
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample(1:172841, size = 0.8*172841)
?sample
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample(x=1:172841, size = 0.8*172841)
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample(x=1:172841, size = 12)
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample_n(x=1:172841, size = 12)
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample_n(x=1:172841, size = 0.8*172841)
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample_n(x=1:172841, size = 138272)
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample_n(size = 138272)
boston_property = read_csv("https://query.data.world/s/pfqt62iufpcricbewykr3q6nrnpj6n")
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0) %>% sample_n(size = 138272)
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0)
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0)
boston_property_sample = boston_property_sample[sample(1:172841, size = 0.8*172841), ]
boston_property_sample = boston_property %>% filter(AV_TOTAL != 0 & AV_LAND != 0 & LIVING_AREA !=0 &
YR_BUILT != 0) %>%
filter(R_TOTAL_RMS != 0)
boston_property_sample = boston_property_sample[sample(1:172841, size = 0.8*172841), ]
library(ISLR)
library(readxl)
womens_earnings_2016 <- read_excel("Desktop/Trial/womens_earnings_2016.xlsx",
skip = 4)
View(womens_earnings_2016)
# Creating a female data frame for the ages -
female_age_df <- data.frame(Age = character(),
Medial_Salary = double())
# Creating a female data frame for the ages -
female_age_df <- data.frame(Age_Character = womens_earnings_2016$Characteristic[c(4:12)],
Medial_Salary = womens_earnings_2016$Female_Median_Weekly_Earnings[c(4:12)])
View(female_age_df)
female_age_df <- female_age_df[-c(1,4), ]
plot(female_age_df$Medial_Salary)
# Creating a male data frame for the ages -
male_age_df <- data.frame(Age_Character = womens_earnings_2016$Characteristic[c(4:12)],
Medial_Salary = womens_earnings_2016$Male_Median_Weekly_Earnings[c(4:12)])
male_age_df <- male_age_df[-c(1,4), ]
plot(male_age_df$Medial_Salary)
plot(female_age_df$Medial_Salary, female_age_df$Age_Character)
plot(female_age_df$Age_Character, female_age_df$Medial_Salary)
plot(female_age_df$Medial_Salary)
# Setting a numeric variable to do linear regression -
female_age_df$Age_Numeric <- c(1:nrow(female_age_df))
# Creating a female data frame for the ages -
female_age_df <- data.frame(Age_Character = womens_earnings_2016$Characteristic[c(4:12)],
Median_Salary = womens_earnings_2016$Female_Median_Weekly_Earnings[c(4:12)])
female_age_df <- female_age_df[-c(1,4), ]
plot(female_age_df$Median_Salary)
# Creating a male data frame for the ages -
male_age_df <- data.frame(Age_Character = womens_earnings_2016$Characteristic[c(4:12)],
Median_Salary = womens_earnings_2016$Male_Median_Weekly_Earnings[c(4:12)])
male_age_df <- male_age_df[-c(1,4), ]
plot(male_age_df$Median_Salary)
# Setting a numeric variable to do linear regression -
female_age_df$Age_Numeric <- c(1:nrow(female_age_df))
male_age_df$Age_Numeric <- c(1:nrow(male_age_df))
female_model <- lm(Median_Salary ~ Age_Numeric, data = female_age_df)
summary(female_model)
male_model <- lm(Median_Salary ~ Age_Numeric, data = male_age_df)
summary(male_model)
plot(female_age_df$Age_Numeric ~ female_age_df$Median_Salary, pch = 20,
xlab = "Age Index", ylab = "Median Salary")
abline(coef = ccoef(female_model), col = "darkred", lwd = 3)
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
xlab = "Age Index", ylab = "Median Salary")
abline(coef = ccoef(female_model), col = "darkred", lwd = 3)
abline(coef = coef(female_model), col = "darkred", lwd = 3)
abline(coef = coef(male_model), col = "darkred", lwd = 3)
plot(pch = 20,
xlab = "Age Index", ylab = "Median Salary")
abline(coef = coef(female_model), col = "darkred", lwd = 3)
abline(coef = coef(male_model), col = "darkred", lwd = 3)
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
xlab = "Age Index", ylab = "Median Salary")
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "blue"
xlab = "Age Index", ylab = "Median Salary")
abline(coef = coef(female_model), col = "blue", lwd = 3)
points(male_age_df$Median_Salary ~ male_age_df$Age_Numeric, pch = 20,
col = "darkred")
abline(coef = coef(male_model), col = "darkred", lwd = 3)
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "blue"
xlab = "Age Index", ylab = "Median Salary")
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "blue",
xlab = "Age Index", ylab = "Median Salary")
abline(coef = coef(female_model), col = "blue", lwd = 3)
points(male_age_df$Median_Salary ~ male_age_df$Age_Numeric, pch = 20,
col = "darkred")
abline(coef = coef(male_model), col = "darkred", lwd = 3)
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "blue",
xlab = "Age Index", ylab = "Median Salary",
ylim = c(1:1200))
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "blue",
xlab = "Age Index", ylab = "Median Salary",
ylim = 1000)
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "blue",
xlab = "Age Index", ylab = "Median Salary",
ylim = c(0, 1200))
abline(coef = coef(female_model), col = "blue", lwd = 3)
points(male_age_df$Median_Salary ~ male_age_df$Age_Numeric, pch = 20,
col = "darkred")
abline(coef = coef(male_model), col = "darkred", lwd = 3)
View(womens_earnings_2016)
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "red",
xlab = "Age Index", ylab = "Median Salary",
ylim = c(0, 1200))
abline(coef = coef(female_model), col = "red", lwd = 3)
points(male_age_df$Median_Salary ~ male_age_df$Age_Numeric, pch = 20,
col = "blue")
abline(coef = coef(male_model), col = "blue", lwd = 3)
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "pink",
xlab = "Age Index", ylab = "Median Salary",
ylim = c(0, 1200))
abline(coef = coef(female_model), col = "pink", lwd = 3)
points(male_age_df$Median_Salary ~ male_age_df$Age_Numeric, pch = 20,
col = "blue")
abline(coef = coef(male_model), col = "blue", lwd = 3)
# This plot gives the overview of the same.
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "pink",
xlab = "Age Index", ylab = "Median Salary",
ylim = c(400, 1200))
abline(coef = coef(female_model), col = "pink", lwd = 3)
points(male_age_df$Median_Salary ~ male_age_df$Age_Numeric, pch = 20,
col = "blue")
abline(coef = coef(male_model), col = "blue", lwd = 3)
remove(female_age_df, male_age_df, female_model, male_model)
female_age_df <- data.frame(Age_Character = womens_earnings_2016$Characteristic[c(4:12)],
Median_Salary = womens_earnings_2016$Female_Median_Weekly_Earnings[c(4:12)])
View(female_age_df)
female_age_df <- female_age_df[-c(1,4), ]
plot(female_age_df$Median_Salary)
# Creating a male data frame for the ages -
male_age_df <- data.frame(Age_Character = womens_earnings_2016$Characteristic[c(4:12)],
Median_Salary = womens_earnings_2016$Male_Median_Weekly_Earnings[c(4:12)])
male_age_df <- male_age_df[-c(1,4), ]
plot(male_age_df$Median_Salary)
# Setting a numeric variable to do linear regression -
female_age_df$Age_Numeric <- c(1:nrow(female_age_df))
male_age_df$Age_Numeric <- c(1:nrow(male_age_df))
View(female_age_df)
# Make a linear Model to see variation in salary according to age in females.
female_model <- lm(Median_Salary ~ Age_Numeric, data = female_age_df)
summary(female_model)
# Make a linear Model to see variation in salary according to age in males.
male_model <- lm(Median_Salary ~ Age_Numeric, data = male_age_df)
summary(male_model)
# This plot gives the overview of the same.
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "pink",
xlab = "Age Index", ylab = "Median Salary",
ylim = c(400, 1200))
abline(coef = coef(female_model), col = "pink", lwd = 3)
points(male_age_df$Median_Salary ~ male_age_df$Age_Numeric, pch = 20,
col = "blue")
abline(coef = coef(male_model), col = "blue", lwd = 3)
library(readxl)
womens_earnings_2016 <- read_excel("Desktop/Trial/womens_earnings_2016.xlsx",
skip = 4)
View(womens_earnings_2016)
# Creating a female data frame for the ages -
female_age_df <- data.frame(Age_Character = womens_earnings_2016$Characteristic[c(4:12)],
Median_Salary = womens_earnings_2016$Female_Median_Weekly_Earnings[c(4:12)])
female_age_df <- female_age_df[-c(1,4), ]
plot(female_age_df$Median_Salary)
# Creating a male data frame for the ages -
male_age_df <- data.frame(Age_Character = womens_earnings_2016$Characteristic[c(4:12)],
Median_Salary = womens_earnings_2016$Male_Median_Weekly_Earnings[c(4:12)])
male_age_df <- male_age_df[-c(1,4), ]
plot(male_age_df$Median_Salary)
# Setting a numeric variable to do linear regression -
# female_age_df$Age_Numeric <- c(1:nrow(female_age_df))
female_age_df$Age_Numeric <- c(17.5, 22, 30, 40, 50, 60, 75)
male_age_df$Age_Numeric <- c(17.5, 22, 30, 40, 50, 60, 75)
# Make a linear Model to see variation in salary according to age in females.
female_model <- lm(Median_Salary ~ Age_Numeric, data = female_age_df)
summary(female_model)
# Make a linear Model to see variation in salary according to age in males.
male_model <- lm(Median_Salary ~ Age_Numeric, data = male_age_df)
summary(male_model)
# This plot gives the overview of the same.
plot(female_age_df$Median_Salary ~ female_age_df$Age_Numeric, pch = 20,
col = "pink",
xlab = "Age Index", ylab = "Median Salary",
ylim = c(400, 1200))
abline(coef = coef(female_model), col = "pink", lwd = 3)
points(male_age_df$Median_Salary ~ male_age_df$Age_Numeric, pch = 20,
col = "blue")
abline(coef = coef(male_model), col = "blue", lwd = 3)
reticulate::repl_python()
import numpy as np
no
reticulate::repl_python()
reticulate::repl_python()
library(readr)
Apr <- read_csv("Desktop/GitHub_Ritesh/NBA_Tweets_Analysis/Data_Cleaning/Apr.csv")
View(Apr)
Apr <- Apr[c(1:50000), ]
setwd("~/Desktop/GitHub_Ritesh/NBA_Tweets_Analysis/Data_Cleaning")
write_csv(Apr, "Apr_2020.csv")
View(Apr)
Apr <- Apr[c(1:5000), ]
write_csv(Apr, "Apr_2020.csv")
